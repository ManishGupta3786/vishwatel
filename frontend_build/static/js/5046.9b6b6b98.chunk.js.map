{"version":3,"file":"static/js/5046.9b6b6b98.chunk.js","mappings":"oNAkLA,QAxKA,SAAyBA,GAcrB,IAdsB,kBACxBC,GAAoB,EAAI,MACxBC,EAAQ,GAAE,aACVC,EAAY,KACZC,EAAI,gBACJC,EAAe,OACfC,EAAM,SACNC,EAAQ,cACRC,EAAa,SACbC,EAAQ,aACRC,EAAY,iBACZC,EAAmB,CAAC,aAAc,YAAa,aAAY,iBAC3DC,KACGC,GACJb,EACC,MAAOc,EAAOC,EAAMC,IAAWC,EAAAA,EAAAA,IAASb,GAClCc,EAAU,IAAKJ,KAAUD,GA4F/B,OA3FIE,GAAQA,EAAKI,SAAWJ,EAAKK,QAC/BF,EAAQE,OAAQ,EAChBF,EAAQG,WAAaN,EAAKK,QA0F1BE,EAAAA,EAAAA,KAACC,EAAAA,EAAKC,KAAI,CACRtB,MAAOA,EACPuB,UAAU,WACVrB,KAAMA,EACNsB,KAAMX,EAAKK,OAAa,OAAJL,QAAI,IAAJA,GAAAA,EAAMK,OAAa,OAAJL,QAAI,IAAJA,GAAAA,EAAMI,QAAUJ,EAAKK,MAAQ,GAChEO,eAAgBT,EAAQE,MAAQ,QAAU,UAAUb,UAEpDqB,EAAAA,EAAAA,MAACC,EAAAA,EAAO,CACNzB,KAAMA,EACN0B,KAAK,OACLC,SAAS,eACTN,UAAU,kBACVO,gBAAgB,EAChBC,OAAQ9B,EACR+B,aA/FgBC,IACpB,MAAMC,EAAazB,EAAiB0B,SAASF,EAAKL,MAE7CM,IACHE,EAAAA,EAAAA,IAAkB,CAChBR,KAAM,QACNS,QAAQ,GAADC,OACLvC,EACI,+BACA,4CAKV,MAAMwC,EAASN,EAAKO,KAAO,KAAO,KAAO,GAazC,OAXKD,GACCxC,IACFqC,EAAAA,EAAAA,IAAkB,CAChBR,KAAM,QACNS,QAAQ,GAADC,OACLvC,GAAqB,2CAMtBmC,GAAcK,CAAM,EAqEvBE,SAlEgBC,IACpB,GAAyB,cAArBA,EAAKT,KAAKU,OACRjC,GACFA,GAAiB,OAEd,CACL,MAAM,OAAEiC,EAAM,SAAEC,GAAaF,EAAKT,KAClC,GAAe,SAAXU,EA3CUE,EAACC,EAAKC,KACtB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,iBAAiB,QAAQ,IAAMH,EAASC,EAAOG,UACtDH,EAAOI,cAAcN,EAAI,EAyCrBD,CAAUH,EAAKT,KAAKoB,eAAe,KAC7B3C,GACFA,GAAiB,EACnB,IAEEX,IACFqC,EAAAA,EAAAA,IAAkB,CAChBR,KAAM,UACNS,QAAS,gCAEXvB,EAAQwC,SAASV,EAASW,KAAKC,UAE/BpB,EAAAA,EAAAA,IAAkB,CAChBR,KAAM,UACNS,QAAQ,GAADC,OAAKI,EAAKT,KAAK/B,KAAI,4BAE5BY,EAAQwC,SAAS,CACfG,IAAKb,EAASW,KAAKE,IACnBvD,KAAMwC,EAAKT,KAAK/B,KAChBwD,KAAMd,EAASW,KAAKC,QAEtBjD,EAAS,CACPkD,IAAKb,EAASW,KAAKE,IACnBvD,KAAMwC,EAAKT,KAAK/B,KAChBwD,KAAMd,EAASW,KAAKC,cAGnB,GAAe,UAAXb,EAAoB,CAAC,IAADgB,EAAAC,EAAAC,EAAAC,EAAAC,GAC7B3B,EAAAA,EAAAA,IAAkB,CAChBR,KAAM,QACNS,SACM,OAAJK,QAAI,IAAJA,GAAU,QAANiB,EAAJjB,EAAMT,YAAI,IAAA0B,GAAU,QAAVC,EAAVD,EAAYf,gBAAQ,IAAAgB,OAAhB,EAAJA,EAAsBvB,WAClB,OAAJK,QAAI,IAAJA,GAAU,QAANmB,EAAJnB,EAAMT,YAAI,IAAA4B,GAAU,QAAVC,EAAVD,EAAYjB,gBAAQ,IAAAkB,GAAO,QAAPC,EAApBD,EAAsB5C,aAAK,IAAA6C,OAAvB,EAAJA,EAA6B1B,SAC/B2B,YAAY,GAAD1B,OAAKI,EAAKT,KAAK/B,KAAI,yBAAAoC,OAAwBI,EAAKT,KAAKW,SAASqB,SAK7E,CACF,MAoBQtD,EAAIN,SAAA,EAERe,EAAAA,EAAAA,KAAA,KAAGG,UAAU,uBAAsBlB,UACjCe,EAAAA,EAAAA,KAAC8C,EAAAA,EAAa,OAEhB9C,EAAAA,EAAAA,KAAA,KAAGG,UAAU,kBAAiBlB,SAAC,wCAoCvC,C","sources":["components/Antd/Upload/index.ant.js"],"sourcesContent":["import React from \"react\";\nimport { InboxOutlined } from \"@ant-design/icons\";\nimport { Form } from \"antd\";\nimport { useField } from \"formik\";\nimport Dragger from \"antd/es/upload/Dragger\";\nimport {\n  modalNotification\n  // removeSessionStorageToken,\n} from \"../../../utils\";\n\nfunction DocumentUploader({\n  applyImageCropper = true,\n  label = \"\",\n  apiEndPoints,\n  name,\n  defaultImageUrl,\n  aspect,\n  children,\n  callUpdateApi,\n  mediaUrl,\n  stepTwoImage,\n  validateFileType = [\"image/jpeg\", \"image/png\", \"image/jpg\"],\n  setUploadLoading,\n  ...rest\n}) {\n  const [field, meta, helpers] = useField(name);\n  const configs = { ...field, ...rest };\n  if (meta && meta.touched && meta.error) {\n    configs.error = true;\n    configs.helperText = meta.error;\n  }\n\n  const getBase64 = (img, callback) => {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => callback(reader.result));\n    reader.readAsDataURL(img);\n  };\n\n  const beforeUpload = (file) => {\n    const isJpgOrPng = validateFileType.includes(file.type);\n\n    if (!isJpgOrPng) {\n      modalNotification({\n        type: \"error\",\n        message: `${\n          applyImageCropper\n            ? \"text.common.imageOnlyMessgae\"\n            : \"Please Upload Either Pdf , Docx or Doc\"\n        }`\n      });\n    }\n\n    const isLt2M = file.size / 1024 / 1024 < 10;\n\n    if (!isLt2M) {\n      if (applyImageCropper) {\n        modalNotification({\n          type: \"error\",\n          message: `${\n            applyImageCropper && \"text.common.imageSizeExceedingMessage\"\n          }`\n        });\n      }\n    }\n\n    return isJpgOrPng && isLt2M;\n  };\n\n  const handleChange = (info) => {\n    if (info.file.status === \"uploading\") {\n      if (setUploadLoading) {\n        setUploadLoading(true);\n      }\n    } else {\n      const { status, response } = info.file;\n      if (status === \"done\") {\n        getBase64(info.file.originFileObj, () => {\n          if (setUploadLoading) {\n            setUploadLoading(false);\n          }\n        });\n        if (applyImageCropper) {\n          modalNotification({\n            type: \"success\",\n            message: \"Image uploaded successfully\"\n          });\n          helpers.setValue(response.data.image);\n        } else {\n          modalNotification({\n            type: \"success\",\n            message: `${info.file.name} uploaded successfully`\n          });\n          helpers.setValue({\n            url: response.data.url,\n            name: info.file.name,\n            path: response.data.image\n          });\n          mediaUrl({\n            url: response.data.url,\n            name: info.file.name,\n            path: response.data.image\n          });\n        }\n      } else if (status === \"error\") {\n        modalNotification({\n          type: \"error\",\n          message:\n            info?.file?.response?.message ||\n            info?.file?.response?.error?.message,\n          description: `${info.file.name} file upload failed. ${info.file.response.detail}`\n        });\n        // if (response.detail.search(\"authenticated\") !== -1) {\n        //   removeSessionStorageToken();\n        // }\n      }\n    }\n  };\n\n  return (\n    <Form.Item\n      label={label}\n      className=\"flex-col\"\n      name={name}\n      help={meta.error && meta?.error && meta?.touched ? meta.error : \"\"}\n      validateStatus={configs.error ? \"error\" : \"success\"}\n    >\n      <Dragger\n        name={name}\n        type=\"file\"\n        listType=\"picture-card\"\n        className=\"avatar-uploader\"\n        showUploadList={false}\n        action={apiEndPoints}\n        beforeUpload={beforeUpload}\n        onChange={handleChange}\n        {...rest}\n      >\n        <p className=\"ant-upload-drag-icon\">\n          <InboxOutlined />\n        </p>\n        <p className=\"ant-upload-text\">Click or drag file to this area</p>\n      </Dragger>\n\n      {/* <Upload\n        name={name}\n        type=\"file\"\n        listType=\"picture-card\"\n        className=\"avatar-uploader\"\n        showUploadList={false}\n        action={apiEndPoints}\n        beforeUpload={beforeUpload}\n        onChange={handleChange}\n        {...rest}\n      >\n        {loading ? (\n          <LoadingOutlined />\n        ) : (\n          <>\n            <label\n              htmlFor=\"uploadPhoto01\"\n              className=\"uploadStuff_upload d-flex flex-column align-items-center justify-content-center mb-0\"\n            >\n              {(fileName && <ImageElement source=\"/file-icon.svg\" />) ||\n                stepTwoImage || (\n                  <>\n                    <em className=\"icon-upload\" />\n                    <span className=\"d-block\">{t(\"text.common.document\")}</span>\n                  </>\n                )}\n            </label>\n          </>\n        )}\n        {children}\n      </Upload> */}\n    </Form.Item>\n  );\n}\n\nexport default DocumentUploader;\n"],"names":["_ref","applyImageCropper","label","apiEndPoints","name","defaultImageUrl","aspect","children","callUpdateApi","mediaUrl","stepTwoImage","validateFileType","setUploadLoading","rest","field","meta","helpers","useField","configs","touched","error","helperText","_jsx","Form","Item","className","help","validateStatus","_jsxs","Dragger","type","listType","showUploadList","action","beforeUpload","file","isJpgOrPng","includes","modalNotification","message","concat","isLt2M","size","onChange","info","status","response","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","originFileObj","setValue","data","image","url","path","_info$file","_info$file$response","_info$file2","_info$file2$response","_info$file2$response$","description","detail","InboxOutlined"],"sourceRoot":""}